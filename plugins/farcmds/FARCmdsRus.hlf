.Language=Russian,Russian (Русский)
.PluginContents=FAR Commands

@Contents
$ #FAR Commands#
   Плагин FAR Commands (или FARCmds) предоставляет ряд дополнительных команд.

   Кроме команды ~"Такой же каталог"~@TheSameCatalogue@, все остальные вызываются с помощью
префиксов командной строки.

   Помимо ~командной строки~@:CmdLineCmd@ префиксы можно использовать в ~меню пользователя~@:UserMenu@, в ~ассоциациях файлов~@:FileAssoc@,
а также в диалоге ~Применить команду~@:ApplyCmd@ (#Ctrl-G#)


  #Синтаксис#

   #command:#[#options#] #object#

   #command# - одно из следующих значений:
             ~view~@View@     - просмотр
             ~edit~@Edit@     - редактирование
             ~goto~@Goto@     - переход к нужному файлу или каталогу
             ~clip~@Clip@     - помещение данных в буфер обмена
             ~whereis~@WhereIs@  - поиск и переход на указанный объект
             ~macro~@Macro@    - работа с макросами
             ~link~@Link@     - создание линков
             ~run~@Run@      - выполнение команд
             ~load~@Load@     - загрузить плагин (только FAR 2)
             ~unload~@Unload@   - выгрузить плагин (только FAR 2)

   #options# - опциональные параметры, см. в описании соответствующих команд.

   #object#  - одно из следующих значений:
             #имяфайла# - имя файла для просмотра, редактирования, перехода.
             #путь#     - путь для перехода к нужному каталогу или файлу.
             #<команда# - ~перехватить вывод~@Direction@ команды операционной системы.
                        Символ #<# обязателен.


   См. также: ~Замечания~@Remark@ | ~Настройка плагина~@Config@

@Load
$ #Команда Load#
   Команда #load# позволяет загрузить плагин #имя_DLL_модуля#.

   #load:имя_DLL_модуля#

   Команда доступна только в Unicode-версии (для FAR 2.x)


   См. также: ~unload~@Unload@ | ~Замечания~@Remark@ | ~Содержание~@Contents@

@Unload
$ #Команда Unload#
   Команда #unload# позволяет выгрузить плагин #имя_DLL_модуля#.

   #unload:имя_DLL_модуля#

   Команда доступна только в Unicode-версии (для FAR 2.x)


   См. также: ~load~@Load@ | ~Замечания~@Remark@ | ~Содержание~@Contents@

@Clip
$ #Команда Clip#
   Команда #clip# позволяет поместить данные в буфер обмена Windows. Под
данными подразумевается содержимое указанного файла или вывод от какой-либо
программы. В буфер обмена помещаются все данные до символа с кодом #0x00#,
максимум - 1 Mb.

   #clip:имяфайла#


   См. также: ~Перехват вывода~@Direction@ | ~Замечания~@Remark@ | ~Содержание~@Contents@

@Run
$ #Команда Run#
   Команда #run# позволяет выполнить #команду# операционной системы с
перехватом её вывода в заданный файл #"имяфайла"#. Результат может быть
параллельно выведен на экран либо скрыт от пользователя, используя
модификаторы ~перехвата вывода~@Direction@.

   #run:имяфайла<команда#


   См. также: ~Перехват вывода~@Direction@ | ~Замечания~@Remark@ | ~Содержание~@Contents@

@View
$ #Команда View#
   Команда #view# позволяет открыть для просмотра во ~встроенном вьювере~@:Viewer@
заданный файл "#имяфайла#":

   #view:имяфайла#


   См. также: ~edit~@Edit@ | ~Перехват вывода~@Direction@ | ~Замечания~@Remark@ | ~Содержание~@Contents@

@Edit
$ #Команда Edit#
   Команда #edit# позволяет открыть для редактирования во ~встроенном редакторе~@:Editor@
заданный файл "#имяфайла#":

      #edit:имяфайла#

   Если файл "#имяфайла#" не существует, то он создаётся. Если после создания
и выхода из редактора файл не изменён, то он удаляется (поведение приближено
к #Shift-F4#).

   При открытии файла можно сразу перейти в заданную позицию. Для этого в квадратных скобках
надо указать нужную строку и, опционально, колонку.
Скобки обязательны!

      #edit:[строка] имяфайла#

      #edit:[строка,колонка] имяфайла#

   Если имя файла содержит квадратные скобки, например, "[1].txt", то для
корректного открытия такого файла в редакторе необходимо перед именем
выставить хотя бы один разделитель (например, пробел) или взять имя файла
в двойные кавычки:

   edit: [1].txt
   edit:"[1].txt"


   См. также: ~view~@View@ | ~Перехват вывода~@Direction@ | ~Замечания~@Remark@ | ~Содержание~@Contents@

@Goto
$ #Команда Goto#
   Команда #goto# позволяет перейти к заданному файлу или каталогу одним
из 2-х способов:

   1. Путь к файлу или каталогу указывается непосредственно в команде

      #goto:путь#

   2. Путь к файлу или каталогу берётся из заданного файла "#имяфайла#"

      #goto: <имяфайла#

   Если параметр "#путь#" указывает имя каталога, заканчивающееся
символом '#\#', то плагин переходит в каталог "#путь#". Если имя
каталога, указанное в параметре "#путь#", не заканчивается '#\#',
то на каталоге #путь# устанавливается курсор в панелях.

   Из файла "#имяфайла#" считывается максимум 1299 байт для имени пути к
каталогу или файлу.

   При выключенных панелях курсор на нужный объект не устанавливается,
происходит только переход в нужный каталог.


   См. также: ~whereis~@WhereIs@ | ~Замечания~@Remark@ | ~Содержание~@Contents@

@Link
$ #Команда Link#
   Команда #link# позволяет создавать и удалять ~ссылки~@:HardSymLink@ для файлов и папок,
а также монтировать локальные диски на файловую систему.


   #link:#[#/msg#] [#/n#] [#/s#] #источник назначение#

   В зависимости от типа источника создаются такие типы связей:

     #файл#  : жёсткая ссылка (#Hardlink#)
     #папка# : связь папок (#Junction#)
     #диск#  : монтируется диск (#Volume mount point#)
             "Диск" должен представлять собой последовательность
             "#буква_диска:\#", например, "#C:\#"

   Ключ #/msg# служит для вывода сообщений об ошибках.

   Ключ #/n# отключает автоматическое обновление панелей после создания связей.

   Ключ #/s# позволяет создавать символические ссылки (#Symlinks#).
   Можно создать символическую ссылку-файл (вместо жёсткой связи) или ссылку-папку (вместо связи папок).
   Ключ актуален в Windows Vista или выше. Игнорируется при монтировании дисков.

   Монтированные диски (volume mount points) - особенность Windows 2000/XP,
которая позволяет отображать отдельные диски на каталоги.
 Например,

   #link: E:\ C:\cdrom#

 После этой команды папка C:\cdrom будет отображать содержимое диска E:


   См. также: ~Замечания~@Remark@ | ~Содержание~@Contents@

@WhereIs
$ #Команда WhereIs#
   Команда #whereis# ищет указанный объект и в случае удачного поиска переходит
к нему.

   #whereis:имяфайла#

   Поиск осуществляется в следующем порядке:
   1. Текущий каталог
   2. Каталог, на который указывает переменная среды %FARHOME%
   3. Каталоги, которые перечислены в переменной окружения #PATH#
   4. Windows 95: Системный каталог Windows (SYSTEM).
      Windows NT: 32-битный системный каталог Windows (SYSTEM32)
   5. Windows NT: 16-битный системный каталог Windows (SYSTEM)
   6. Каталог Windows.
   7. Содержимое ветки реестра:
      #HKCU\Software\Microsoft\Windows\CurrentVersion\App Paths#
   8. Содержимое ветки реестра:
      #HKLM\Software\Microsoft\Windows\CurrentVersion\App Paths#

   При выключенных панелях курсор на нужный объект не устанавливается,
происходит только переход в нужный каталог.


   См. также: ~goto~@Goto@ | ~Замечания~@Remark@ | ~Содержание~@Contents@

@Macro
$ #Команда Macro#
   Команда #macro# позволяет загрузить макросы из реестра или сохранить
макросы в реестр, а также передать в FAR Manager последовательность
клавиш для последующего исполнения.

   1. Загрузить макросы из реестра:

      #macro:load#

   2. Сохранить макросы в реестр:

      #macro:save#

   3. Передать последовательность клавиш:

      #macro:post sequence#

      Здесь "sequence" - последовательность названий клавиш в том
      виде, как их хранит FAR Manager в реестре. Например:

      macro:post F4 F12 0 Tab F4 F12 0

      Последовательность переданных клавиш исполняется только после
      того, как FAR Manager получит управление.

   4. Проверить синтаксис макропоследовательности

      #macro:check sequence#

      В случае ошибок в "sequence" будет выведено сообщение с
      указанием типа ошибки и позиции в последовательности.

   Команда #check# доступна только в Unicode-версии (для FAR 2.x)


   См. также: ~Макросы~@:KeyMacro@, ~Замечания~@Remark@ | ~Содержание~@Contents@

@Direction
$ #Перехват вывода#
   Плагин умеет перехватывать вывод заданной команды #"<команда"# или #"<<команда"#.

    #команда# - [#stream#][#mode#][#|путь|#]#command#.

    #stream# - управление перехватом вывода #команды#.
             #1# - перехватывать только стандартный поток вывода #stdout#.
             #2# - перехватывать только стандартный поток вывода ошибок #stderr#.
             #*# - перехватывать и #stderr# и #stdout# как один поток.
             #?# - перехватывать #stderr# и #stdout# как разные потоки.
                 В командах ~view~@View@ и ~edit~@Edit@ перехваченные потоки будут
                 открыты в разных окнах. В других командах равносильно #*#.
             Значение параметра по умолчанию может быть задано в ~настройках~@Config@.

    #mode#   - управление выводом #команды# на экран в обход
             стандартных потоков ввода/вывода.
             #># - игнорировать консольный вывод выполняемой программы
                 и отобразить только сообщение о её выполнении.
             #<# - сохранять консольный вывод и сделать его доступным
                 для просмотра по #Ctrl-O#.
             #+# - аналогична #<#, но выводит на экран не только консольный,
                 но и перехватываемый вывод выполняемой программы.
             Значение параметра по умолчанию может быть задано в ~настройках~@Config@.

    #|путь|# - команда может быть выполнена в каталоге, отличном от текущего.
             Для этого нужно указать путь, заключив его в символы '#|#'.
             Пример: #edit:<|%TEMP%|dir#

   Вывод команды может быть открыт во вьювере: #~view~@View@:<command#
     или в редакторе:                          #~edit~@Edit@:<command#
     или помещён в буфер обмена:               #~clip~@Clip@:<command#
     либо сохранён в заданный файл:            #~run~@Run@:filename<command#


  #Примечания:#

   #1#. Всё, что расположено после символа '#<#' и необязательных
модификаторов, передаётся командному процессору (%COMSPEC%).

   #2#. Результат работы команды помещается во временный файл, который будет автоматически удалён, если больше не
нужен FAR`у.

   #3#. Некоторые программы осуществляют вывод на экран не через
стандартный поток вывода, перехватываемый плагином, а
непосредственно на консоль. Чтобы сохранить консольный
вывод и сделать его доступным для просмотра по #Ctrl-O#,
используйте модификаторы '#>#' и '#+#'. Чтобы наоборот, скрыть его - '#<#'.
      Данное поведение может быть закреплено как поведение по
умолчанию в ~настройках плагина~@Config@.

   #4#. Если параметр #stream# равен #1# или #2#, то начало имени команды
должно быть обязательно отделено от него каким-нибудь символом.


  #Примеры:#

   Выполнить команду "#command#" с выводом результата в редакторе:
     #edit:<command#

   Возможные случаи с параметром #stream#=#1#:
     #edit:<1 command#
     #edit:<1"command"#
     #edit:<1+command#
     #edit:<1|%TEMP%|command#


   См. также: ~Замечания~@Remark@ | ~Содержание~@Contents@

@TheSameCatalogue
$ #"Такой же каталог"#
  Для того, чтобы установить для пассивной панели такой же
каталог, как и на активной панели, необходимо из ~меню плагинов~@:PluginCommands@
или ~меню дисков~@:DriveDlg@ выбрать пункт "#Такой же каталог#"
("Same Directory")


   См. также: ~Настройка плагина~@Config@ | ~Содержание~@Contents@

@Remark
$ #Замечания#

   1. Допускается заключать в кавычки параметры #имяфайла#,
      #путь# и #команда#.

   2. Допускается использование переменных окружения.

   3. Если Вы ошибётесь в наборе, то появится подсказка.

   4. В качестве #команды# могут использоваться консольные алиасы
      (Консольные алиасы - "макросы" созданные командой DOSKEY)

   5. Перед каждой из команд допустимо дополнительно указывать
      префикс #far:#

      #command:#[#options#] #object#
      #far:command# [#options#] #object#

      Обе формы записи равнозначны.


   См. также: ~Содержание~@Contents@

@Config
$ #Настройка FAR Commands#

 #Добавить "Такой же каталог"#  Добавляет в ~меню плагинов~@:PluginCommands@ команду установки
 #в меню плагинов#              на пассивной панели ~такого же каталога~@TheSameCatalogue@,
                              как и на активной.

 #Добавить "Такой же каталог"#  Добавляет в ~меню дисков~@:DriveDlg@ команду установки
 #в меню дисков#                на пассивной панели ~такого же каталога~@TheSameCatalogue@,
                              как и на активной.

 #Экранный вывод внешних команд# Управление ~выводом~@Direction@ программ на экран:

   #Скрывать экранный вывод#     Позволяет скрыть вывод программы.
   #внешних команд#              Будет отображаться только сообщение о
                               размере перехваченного вывода.
                               Аналогично использованию #<># вместо #<#.

   #Сохранять экранный вывод#    Позволяет сохранить для просмотра по
   #внешних команд#              #Ctrl-O# текст, который программы
                               выводят непосредственно на консоль.
                               Аналогично использованию #<<# вместо #<#.

   #Копировать перехваченный#    Позволяет сохранить для просмотра по
   #вывод на экран#              #Ctrl-O# как текст, выводимый на
                               консоль, так и перехватываемый вывод.
                               Аналогично использованию #<+# вместо #<#.

 #Перехват вывода#               Управление перехватом ~вывода~@Direction@ программ:

   #Перехватывать#               Перехватывать поток стандартного
   #stdout и stderr#             вывода #stdout# и поток вывода ошибок
                               #stderr# как один поток вывода.
                               Аналогично использованию #<*# вместо #<#.

   #Перехватывать только#        Перехватывать только #stdout#.
   #stdout (стандартный вывод)#  Аналогично использованию #<1# вместо #<#.

   #Перехватывать только#        Перехватывать только #stderr#.
   #stderr (вывод ошибок)#       Аналогично использованию #<2# вместо #<#.

   #Перехватывать#               Перехватывать #stdout# и #stderr#
   #stdout и stderr раздельно#   независимо. Имеет смысл только в
                               командах #far:view <# и #far:edit <#.
                               В остальных случаях аналогично #<*#.
                               Не совместим с #<+#.
                               Аналогично использованию #<?# вместо #<#.

 #Открывать на просмотр/#        При выключенной опции существующий
 #редактирование пустые файлы#   файл с нулевым размером не будет
                               открываться на просмотр или
                               редактирование.

 #Редактировать новый файл#      Позволяет открывать редактор для
                               несуществующего файла.

  См. также: ~Содержание~@Contents@
